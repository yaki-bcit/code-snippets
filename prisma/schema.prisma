// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts     Post[]
  likes     Like[]
  comments  Comment[]
}

model Post {
  id            Int       @default(autoincrement()) @id
  title         String
  code          String    @db.Text
  language      String
  totalComments Int       @default(0)
  totalLikes    Int       @default(0)
  published     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  comments      Comment[]
  likes         Like[]
}

model Comment {
  id        Int       @default(autoincrement()) @id
  content   String
  createdAt DateTime  @default(now())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  postId    Int
  Post      Post      @relation(fields: [postId], references: [id])
}

model Like {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  email     String
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  Post      Post     @relation(fields: [postId], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}